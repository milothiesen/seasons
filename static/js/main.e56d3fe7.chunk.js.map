{"version":3,"sources":["SeasonDisplay.js","Spinner.js","Footer.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","Footer","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"mOAGMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kBACNC,SAAU,cAyBHE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC5BlBU,EAAU,SAACP,GACb,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SAAqCN,EAAMQ,aAKvDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCAAG,G,MAXA,kBACX,qBAAKJ,UAAU,SAAf,SACI,kSCCFK,E,4MACFC,MAAQ,CAAEX,IAAK,KAAMY,aAAc,I,uDACnC,WAAqB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAId,e,2BAInD,WACI,OAAIe,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMX,IAChC,0CAAasB,KAAKX,MAAMC,iBAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMX,IAChC,cAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAGnC,cAAC,EAAD,CAASO,QAAQ,qC,oBAI5B,WACI,OACI,sBAAKF,UAAU,aAAf,UACKiB,KAAKC,gBADV,IAC2B,cAAC,EAAD,W,GAzBrBC,IAAMC,WA+BxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.e56d3fe7.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Let's hit the beach\",\n        iconName: 'sun',\n    },\n    winter: {\n        text: 'burr it is cold',\n        iconName: 'snowflake',\n    },\n};\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n};\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className='ui active dimmer'>\n            <div className='ui big text loader'>{props.message}</div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...',\n};\n\nexport default Spinner;\n","import './Footer.css';\nimport React from 'react';\n\nconst Footer = () => (\n    <div className='footer'>\n        <p>\n            This site was made based on Stephen Grider's course Modern\n            React/Redux [2020] on Udemy.com. This site reads a users location\n            and determines whether they are in the northernn or southern\n            hemisphere and then returns an appropriate comment for that season.\n        </p>\n    </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n    state = { lat: null, errorMessage: '' };\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => this.setState({ lat: position.coords.latitude }),\n            (err) => this.setState({ errorMessage: err.message })\n        );\n    }\n\n    renderContent() {\n        if (this.state.errorMessage && !this.state.lat) {\n            return <div>Error: {this.state.errorMessage}</div>;\n        }\n\n        if (!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} />;\n        }\n\n        return <Spinner message='Please accept location request' />;\n    }\n\n    // react says that we have to define render!!\n    render() {\n        return (\n            <div className='border red'>\n                {this.renderContent()} <Footer />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}